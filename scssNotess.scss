/* =======================================================================
  ____     ____   ____    ____      _   _    ___    _____   _____   ____  
 / ___|   / ___| / ___|  / ___|    | \ | |  / _ \  |_   _| | ____| / ___| 
 \___ \  | |     \___ \  \___ \    |  \| | | | | |   | |   |  _|   \___ \ 
  ___) | | |___   ___) |  ___) |   | |\  | | |_| |   | |   | |___   ___) |
 |____/   \____| |____/  |____/    |_| \_|  \___/    |_|   |_____| |____/ 
                                                                          
======================================================================== */



/* 
  ___  _____  ___  _   _   ___  _____  _   _  ___  ___ 
 / __||_   _|| _ \| | | | / __||_   _|| | | || _ \| __|
 \__ \  | |  |   /| |_| || (__   | |  | |_| ||   /| _| 
 |___/  |_|  |_|_\ \___/  \___|  |_|   \___/ |_|_\|___|*/
/* Define Variables before Mixins, CSS needs to reference what has been defined already */

$varialbes: first;
@mixins second;
.css {last: thing;}



/* 
 __   __ _    ___  ___    _    ___  _     ___  ___ 
 \ \ / //_\  | _ \|_ _|  /_\  | _ )| |   | __|/ __|
  \ V // _ \ |   / | |  / _ \ | _ \| |__ | _| \__ \
   \_//_/ \_\|_|_\|___|/_/ \_\|___/|____||___||___/*/
/* Variable store values that you reference in declarations */

// scss:
$color-primary: #ffffff;
.className {color: $color-primary;}
// css:
.className {color: #ffffff;}



/* 
  _  _  ___  ___  _____  ___  ___    ___  ___  _     ___  ___  _____  ___   ___  ___ 
 | \| || __|/ __||_   _|| __||   \  / __|| __|| |   | __|/ __||_   _|/ _ \ | _ \/ __|
 | .` || _| \__ \  | |  | _| | |) | \__ \| _| | |__ | _|| (__   | | | (_) ||   /\__ \
 |_|\_||___||___/  |_|  |___||___/  |___/|___||____||___|\___|  |_|  \___/ |_|_\|___/*/
/* Nested selectors make writing descendant and complex selectors fast */

// ex 1:
// scss:
nav {
	margin-top: 10px;
	li {margin-top: 15px;}
}
// css:
nav {margin-top: 10px;}
nav li {margin-top: 15px;}

// ex 2:
// scss:
.button {
	text: {
		align: center;
		decoration: none;}
}
// css:
.button {
	text-align: center;
	text-decoration: none;
}



/* 
  ___   _    ___  ___  _  _  _____   ___  ___  _     ___  ___  _____  ___   ___ 
 | _ \ /_\  | _ \| __|| \| ||_   _| / __|| __|| |   | __|/ __||_   _|/ _ \ | _ \
 |  _// _ \ |   /| _| | .` |  | |   \__ \| _| | |__ | _|| (__   | | | (_) ||   /
 |_| /_/ \_\|_|_\|___||_|\_|  |_|   |___/|___||____||___|\___|  |_|  \___/ |_|_\*/
/* Reference the parent selector of a nested rule using the ampersand (&) */

// scss:
#main {
	color: black;
	a {
		color: blue;
		&:hover { color: red; }
	}
	&-sidebar { color: gray; }
}
// css:
#main {
	color: black;}
#main a {
	color: blue;}
#main a:hover {
	color: red;}
#main-sidebar {
	color: gray;
}



/*
  __  __  ___ __  __ ___  _  _  ___ 
 |  \/  ||_ _|\ \/ /|_ _|| \| |/ __|
 | |\/| | | |  >  <  | | | .` |\__ \
 |_|  |_||___|/_/\_\|___||_|\_||___/*/
/* Mixins allow you to define styles/rulesets that can be re-used and referenced */

// ex 1 (Can contain selectors, possibly mixed with properties. The selectors can even contain parent references):
// scss:
@mixin clearfix {
	display: inline-block;
	color: white;
	&::after {
		content: "";
		display: block;
		clear: both;
	}
	div & {
		color: black;
	}
}
section {
	@include clearfix;
}
// css:
section {
	display: inline-block;
	color: white;
}
section::after {
	content: "";
	display: block;
	clear: both;
}
div section {
	color: black;
}

// ex 2 (Can be included outside of any rule (that is, at the root of the document) as long as they don't directly define any properties or use any parent references):
// scss:
@mixin cssRuleset {
	a {
		color: blue;
		background-color: red;}
}
@include cssRuleset;
// css:
a {
	color: blue;
	background-color: red;
}

// ex 3 (Can pass a block of styles to the mixin for placement within the styles included by the mixin. The styles will appear at the location of any @content directives found within the mixin):
// scss:
@mixin clearfix {
	display: inline-block;
	&::after {
		color: white;
	@content;
	}
}
section {
	@include clearfix; {
		background-color: black;
	}
}
// css:
section {
	display: inline-block; }
	section::after {
		color: white;
		background-color: black;
}



/*
  ___ __  __ _____  ___  _  _  ___  
 | __|\ \/ /|_   _|| __|| \| ||   \ 
 | _|  >  <   | |  | _| | .` || |) |
 |___|/_/\_\  |_|  |___||_|\_||___/ */
/* Useful directive for sharing sets of related properties that get repeated in your stylesheets. */

// ex 1 ():
// scss:
.btn {
	border: 1px #f00;
	background-color: #fdd;
}
.btn-callout {
	@extend .error;
	border-width: 3px;
}
// css:
.btn, .btn-callout {
	border: 1px #f00;
	background-color: #fdd;
}
.btn-callout {
	border-width: 3px;
}

// ex 2 (A placeholder selector, won't appear in the CSS output unless extended):
// scss:
%btn {
	border: 1px #000;
	background-color: #fdd;
}
.btn-callout {
	@extend %btn;
	border: 3px #f50;
}
.btn-warning {
	@extend %btn;
	border: 5px #f00;
}
// css:
.btn-callout, .btn-warning  {
	border: 1px #000;
	background-color: #fdd;
}
.btn-callout {
	border: 3px #f50;
}
.btn-warning {
	border: 5px #f00;
}



/*
  ___   _    ___  _____  ___    _    _     ___ 
 | _ \ /_\  | _ \|_   _||_ _|  /_\  | |   / __|
 |  _// _ \ |   /  | |   | |  / _ \ | |__ \__ \
 |_| /_/ \_\|_|_\  |_|  |___|/_/ \_\|____||___/*/
/* Partials let you split your stylesheet into separate files. They help modularize your CSS and keep things easier to maintain */

//If you have a SCSS file that you want to import but don't want to compile to a CSS file, you can add an underscore to the beginning of the filename.
scss [folder]
	_variables.scss
	_mixins.scss

// This will tell Sass not to compile it to a normal CSS file. You can then import these files without using the underscore.
@import 'variables', 'mixins';



/*
  __  __  ___  ___  ___    _      ___   _   _  ___  ___  ___  ___  ___ 
 |  \/  || __||   \|_ _|  /_\    / _ \ | | | || __|| _ \|_ _|| __|/ __|
 | |\/| || _| | |) || |  / _ \  | (_) || |_| || _| |   / | | | _| \__ \
 |_|  |_||___||___/|___|/_/ \_\  \__\_\ \___/ |___||_|_\|___||___||___/*/
/* Nest media queries directly inside the initial rules you're modifying */

// ex 1 (Add media-specific styles without having to repeat selectors or break the flow of the stylesheet.):
// scss:
.img-responsive {
	width: 100%;
	@media (min-width: 768px) {
		width: 500px;
	}
}
// css:
.img-responsive {
	width: 100%; }
	@media (min-width: 768px) {
		.img-responsive {
			width: 500px; }
}

// ex 2 (Can also be nested within one another. Queries will then be combined using the and operator):
// scss:
@media (min-width: 768px) {
	.img-responsive {
		@media (max-width: 992px) {
		width: 500px;}
	}
}
// css:
@media (min-width: 768px) and (max-width: 992px) {
	.img-responsive {
		width: 500px; }
}

// ex 3 (Expressions including variables, functions, and operators can be used in place of the feature names and feature values):
// scss:
$breakpoint-s: 768px;
$breakpoint-m: 992px;
@media (min-width: $breakpoint-s) {
	.img-responsive {
		@media (max-width: $breakpoint-m) {
		width: 500px;}
	}
}
// css:
@media (min-width: 768px) and (max-width: 992px) {
	.img-responsive {
		width: 500px; }
}



/*
    _    ___   ___  _   _  __  __  ___  _  _  _____  ___ 
   /_\  | _ \ / __|| | | ||  \/  || __|| \| ||_   _|/ __|
  / _ \ |   /| (_ || |_| || |\/| || _| | .` |  | |  \__ \
 /_/ \_\|_|_\ \___| \___/ |_|  |_||___||_|\_|  |_|  |___/*/
/* Mixins allow you to define styles/rulesets that can be re-used and referenced */